@use "variables" as *;

/* Keep footer at bottom */
body {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  overflow-x: hidden;

  footer {
    margin-top: auto;
  }
}

/* Disable user text-selection on the whole app */
body {
  user-select: none;
}

/* TEXTS */
.uppercase {
  text-transform: uppercase;
}

.text--fail {
  color: $error;
}

.text--average {
  color: $warning;
}

.text--pass {
  color: $success;
}

.separator {
  width: 100%;
  height: 1px;
  background-color: $border-color;
  margin-bottom: 1rem;
}

.icon-link {
  background: transparent;
  border: none;
  padding-inline: 0;

  svg {
    fill: $primary;
  }

  &:hover svg {
    fill: #0053a5;
  }

  &:disabled,
  &.disabled {
    svg {
      fill: $secondary;
    }
  }
}

:disabled,
.disabled {
  cursor: not-allowed !important;
}

/* Since :disabled buttons have pointer-events: none wrap them in a <span> and set cursor: not-allowed on it */
.disabled-wrapper:has(> button:disabled) {
  cursor: not-allowed;
}

.button-as-link {
  all: unset;
  outline: revert;

  color: var(--bs-link-color);
  text-decoration: underline;

  &:hover {
    color: var(--bs-link-hover-color);
  }
}

/* Fix bootstrap keyboard focus style */
.btn-primary:hover,
.btn-primary:focus-visible {
  background-color: rgb(0, 82.62, 165.24);
  color: #fff;
  border-color: rgb(0, 76.5, 153);
}

.btn-danger:hover,
.btn-danger:focus-visible {
  background-color: hsl(350, 60%, 40.5%);
  color: #fff;
  border-color: hsl(350, 60%, 37.5%);
}

.btn-success:hover,
.btn-success:focus-visible {
  background-color: rgb(0, 103.275, 68.85);
  color: #fff;
  border-color: rgb(0, 95.625, 63.75);
}

.btn-secondary:hover,
.btn-secondary:focus-visible {
  background-color: hsl(210, 17%, 35.64%);
  color: #fff;
  border-color: hsl(210, 17%, 33%);
}

:focus:not(.focus--mouse),
.form-check .toggles label:has(input[type="checkbox"]:focus:not(.focus--mouse)),
.form-check [type="checkbox"]:focus + label,
.form-check [type="radio"]:focus + label,
.toggles label input[type="checkbox"]:focus + .lever,
.it-carousel-wrapper .splide__pagination button:focus:not(.focus--mouse),
.upload:focus:not(.focus--mouse) + label,
.upload-dragdrop-input:focus[type="file"]:not(.focus--mouse) + label,
.avatar-upload:focus-within:not(.focus--mouse),
.rating input:focus:not(.focus--mouse) + label svg {
  border-color: transparent !important;
  border-radius: 2px !important;
  box-shadow:
    0 0 0 2px $white,
    0 0 0 5px var(--bs-primary) !important;
  outline: 3px solid var(--bs-primary) !important;
  outline-offset: 3px;
}

.btn,
.page-link {
  transition: none;
}

dl.info-scanning {
  font-size: 1rem;

  dt,
  dd {
    display: inline;
  }

  @media screen and (max-width: 992px) {
    row-gap: 0 !important;
  }
}

.legend {
  display: flex;
  column-gap: 16px;
  row-gap: 4px;
  align-items: center;
  flex-wrap: wrap;

  /* force it on two rows @mobile */
  @media screen and (max-width: 768px) {
    max-width: 420px;
  }

  b {
    font-size: var(--fs-18px);
  }

  .legend-item {
    display: flex;
    align-items: center;
    gap: 6px;
    white-space: nowrap;
    flex-shrink: 0;

    p {
      margin: 0;
      font-size: var(--fs-14px);
    }
  }
}

.history-title {
  @media screen and (max-width: 992px) {
    flex-direction: column;
    margin-bottom: 0 !important;

    .legends-container {
      align-items: flex-start !important;

      .icon {
        width: 28px;
        height: 28px;
      }

      .circle {
        margin: 4px;
      }
    }
  }
}
